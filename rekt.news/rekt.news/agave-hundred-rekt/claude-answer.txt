Status: SUCCESS
Message:  Based on the details provided, it seems the vulnerability that enabled the attacks was a reentrancy vulnerability due to the design of the xDAI token, which contains the function callAfterTransfer(). 

Specifically:

- The xDAI token has a callAfterTransfer() function that allows reentrancy. This created a vulnerability in the lending protocols Agave and Hundred Finance that are built on the xDAI chain.

- The attacker exploited this by using flash loans to borrow assets repeatedly in a nested way before the protocols could update balances, essentially draining funds. This is similar to the reentrancy attack on Cream Finance mentioned.

- The post mortems highlight that even if you fork/copy strong code from established projects like Aave and Compound, new vulnerabilities can emerge in different environments. Key lessons being strict input vetting, following checks-effects-interactions coding patterns, and extensive auditing when bringing code to new chains.

So in summary, the root cause was the reentrancy vulnerability due to the callAfterTransfer() function in the xDAI token, which enabled the flash loan attacks on the lending protocols. The write-up has good technical detail on the specific attack flow.
================================================================================
METADATA:
prompt_tokens: 471
answer_tokens: 183
time_taken: 11.90 seconds
